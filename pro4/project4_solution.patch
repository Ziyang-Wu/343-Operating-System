diff --git a/include/syscall.h b/include/syscall.h
index c55cec2..0c47f23 100644
--- a/include/syscall.h
+++ b/include/syscall.h
@@ -23,5 +23,9 @@
 #define SYS_sbrk   19
 #define SYS_sleep  20
 #define SYS_uptime 21
+#define SYS_tagFile 22
+#define SYS_removeFileTag 23
+#define SYS_getFileTag 24
+#define SYS_getAllTags 25
 
 #endif // _SYSCALL_H_
diff --git a/include/types.h b/include/types.h
index cfcdb4a..49800b3 100644
--- a/include/types.h
+++ b/include/types.h
@@ -11,4 +11,12 @@ typedef uint pde_t;
 #define NULL (0)
 #endif
 
+
+#ifndef _KEY_H_
+#define _KEY_H_
+struct Key {
+    char key[10];  // at most 10 bytes for key
+};
+#endif // _KEY_H_
+
 #endif //_TYPES_H_
diff --git a/kernel/defs.h b/kernel/defs.h
index c12f8ff..06efbaf 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -1,6 +1,7 @@
 #ifndef _DEFS_H_
 #define _DEFS_H_
 
+
 struct buf;
 struct context;
 struct file;
@@ -51,6 +52,11 @@ struct inode*   nameiparent(char*, char*);
 int             readi(struct inode*, char*, uint, uint);
 void            stati(struct inode*, struct stat*);
 int             writei(struct inode*, char*, uint, uint);
+int             tagFile(int fileDescriptor, char* key, char* value, int valueLength);
+int             removeFileTag(int fileDescriptor, char* key);
+int             getFileTag(int fileDescriptor, char* key, char* buffer, int length);
+int             getAllTags(int fileDescriptor, struct Key *keys, int maxTags);
+
 
 // ide.c
 void            ideinit(void);
diff --git a/kernel/file.h b/kernel/file.h
index e4e4119..f832e6b 100644
--- a/kernel/file.h
+++ b/kernel/file.h
@@ -25,6 +25,7 @@ struct inode {
   short nlink;
   uint size;
   uint addrs[NDIRECT+1];
+  uint tags;
 };
 
 #define I_BUSY 0x1
diff --git a/kernel/fs.c b/kernel/fs.c
index 2d519b0..fe6dcbd 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -21,6 +21,7 @@
 #include "fs.h"
 #include "file.h"
 
+
 #define min(a, b) ((a) < (b) ? (a) : (b))
 static void itrunc(struct inode*);
 
@@ -374,6 +375,11 @@ itrunc(struct inode *ip)
     bfree(ip->dev, ip->addrs[NDIRECT]);
     ip->addrs[NDIRECT] = 0;
   }
+    //*******free tags******
+    if (ip->tags) {
+        bfree(ip->dev, ip->tags);
+        ip->tags = 0;
+    }
 
   ip->size = 0;
   iupdate(ip);
@@ -611,3 +617,251 @@ nameiparent(char *path, char *name)
 {
   return namex(path, 1, name);
 }
+
+//************************* Self-deinfined finding functions ********************
+
+int
+find_key1(uchar* key, uchar* str){
+    uint i;
+    int res;
+    int keyLength = strlen((char*)key);
+    char* temp[11];
+    for(i = 0; i < BSIZE; i +=32){
+        memset((void*)temp, 0, 10);
+        memmove((void*)temp, str + i, 10);
+        res = memcmp(temp, key, keyLength);
+        if (res == 0){
+            return i;
+        }
+    }
+    return -1;
+}
+
+int
+find_tail(uchar* str)
+{
+    int i = 0;
+    for (i = 0; i < BSIZE && str[i]; i += 32) ;
+    if (i == BSIZE) return -1;
+    return i;
+}
+
+
+
+//******************* real implementation of tagFile *********************************
+int
+tagFile(int fileDescriptor, char* key, char* value, int valueLength){
+    struct file *fp;//file pointer
+    struct buf *bp;//buffer pointer
+    uchar *str;//string poitner
+    fp = proc->ofile[fileDescriptor];
+    //Fail requirement 1: if that fd returns -1 or exceed the maximum number of file or reference a invalid value.
+    if (fileDescriptor < 0 || fileDescriptor >= NOFILE || fp == 0) {
+        return -1;
+    }
+    // Requirement 0ï¼šThe file descriptor must be opened in write mode in order to tag a file successfully.
+    if (fp->type != FD_INODE || !fp->writable || !fp->ip){
+        return -1;
+    }
+    
+    //Failure requirement 2: The key must be at least 2 bytes (including the null termination byte) and at most 10 bytes (including the null termination byte).
+    if (!key || strlen(key)< 1 || strlen(key) > 9) {
+        return -1;
+    }
+    //value length requirement
+    if (!value || valueLength < 0 || valueLength >18) {
+        return -1;
+    }
+    //lock the inode
+    ilock(fp->ip);
+    //if there are no tag filed in inode, then allocate a block in device to store the tag
+    if (!fp->ip->tags) {
+        fp->ip->tags = balloc(fp->ip->dev);
+    }
+    //After all the above implementation, now we have the a tag field int the inode struct!! Let's get start the append the key-value pairs onto the file
+    
+    //To get a buffer for a particular disk block, call bread.
+    //So we first feed the tag block into the buffer, which could accelerate the whole process.
+    bp = bread(fp->ip->dev, fp->ip->tags);
+    //Compare our key with tag to check whether need to override, if not, create a new field.
+    str = (uchar*)bp->data;//Get the tag filed within the buffer, assign it to "str"
+    //Find the key index
+    int index_key = find_key1((uchar*)key,(uchar*)str);
+    //If didn't find the specific key
+    if (index_key < 0){
+        //Find the end of the tag field
+        int index_tail = find_tail((uchar*)str);
+        //Failure requirement 3: If there isn't sufficient tag space for tagFile to complete, you can simply return -1.
+        if (index_tail < 0) {
+            brelse(bp);
+            iunlock(fp->ip);
+            return -1;
+        }
+        //Otherwise, we allocate a new key-value pair.
+        memmove((void*)((uint)str + (uint)index_tail), (void*)key, (uint)strlen(key)); //key is null-terminated, so we use sizeof to include the length of null byte at the end of string.
+        memmove((void*)((uint)str + (uint)index_tail + 10), (void*)value, (uint)valueLength);  //value is not null-terminated
+        //Buffer write back to the inode on disk.
+        bwrite(bp);
+        //Release the buffer
+        brelse(bp);
+        iunlock(fp->ip);
+        return 1;
+        
+    }
+    //If find the corresponding key, directly replace the value with new value.
+    memset((void*)((uint)str + (uint)index_key + 10), 0, 18);
+    memmove((void*)((uint)str + (uint)index_key + 10), (void*)value, (uint)valueLength);
+    
+    bwrite(bp);
+    brelse(bp);
+    iunlock(fp->ip);
+    return 1;
+    
+}
+int
+removeFileTag(int fileDescriptor, char* key){
+    struct file *fp = proc->ofile[fileDescriptor];//pointer to the file with descriptor
+    struct buf *bp;//pointer to the buffer
+    int keyLength = strlen(key);
+    if (fileDescriptor < 0||fileDescriptor >= NOFILE ||fp == 0) {
+        return -1;
+    }
+    // If the file type doesn't match or can't writable
+    if (fp->type != FD_INODE || !fp->writable || !fp->ip || !fp->ip->tags) {
+        return -1;
+    }
+    if (!key || keyLength < 0 || keyLength >9) {
+        return -1;
+    }
+    ilock(fp -> ip);
+    bp = bread(fp->ip->dev, fp->ip->tags);
+    uchar* data = (uchar*)bp->data;
+    //find the specific position of key
+    int index_key = find_key1((uchar*)key,(uchar*)data);
+    //
+    if(index_key<0){
+        brelse(bp);
+        iunlock(fp->ip);
+        return -1;
+    }
+    //If find successful, then set value to 0.
+    memset((void*)(uint)data + (uint)index_key, 0, 28);
+    bwrite(bp);
+    brelse(bp);
+    iunlock(fp->ip);
+    return 1;
+}
+
+int
+getFileTag(int fileDescriptor, char* key, char* buffer, int length)
+{
+    struct file *fp = proc->ofile[fileDescriptor];
+    int keyLength = strlen(key);
+    int valueLength;
+    struct buf *bp;
+    uchar str[BSIZE];
+    uchar *value;
+    if (fileDescriptor < 0||fileDescriptor >= NOFILE ||fp == 0) {
+        return -1;
+    }
+    if (fp->type != FD_INODE || !fp->readable || !fp->ip || !fp->ip->tags) {
+        return -1;
+    }
+    if (!key|| keyLength < 0 || keyLength >9) {
+        return -1;
+    }
+    if (!buffer) {
+        return -1;
+    }
+    if (length < 0 || length > 18) {
+        return -1;
+    }
+    ilock(fp->ip);
+    
+    bp = bread(fp->ip->dev, fp->ip->tags);
+    memmove((void*)str, (void*)bp->data, (uint)BSIZE);
+    brelse(bp);
+    iunlock(fp->ip);
+    
+    int index_key = find_key1((uchar*)key,(uchar*)str);
+    //If didn't find the specific key
+    if (index_key < 0) {
+        return -1;
+    }
+    value = (uchar*)((uint)str + (uint)index_key + 10);
+    valueLength = 17;
+    while (valueLength >= 0 && !value[valueLength]) {
+        valueLength --;
+    }
+    valueLength ++;
+    memset((void*)buffer, 0, length);
+    memmove((void*)buffer, (void*)value, (uint)min(length, valueLength));
+    
+    return valueLength;
+    
+}
+
+int
+getAllTags(int fileDescriptor, struct Key *keys, int maxTags)
+{
+    struct file *fp = proc->ofile[fileDescriptor];
+    struct buf *bp;
+    uchar str[BSIZE];
+    uint i;
+    int j;
+    
+    if (fileDescriptor < 0||fileDescriptor >= NOFILE ||fp == 0) {
+        cprintf("fileDescriptor < 0||fileDescriptor >= NOFILE ||fp == 0");
+        return -1;
+    }
+    if (fp->type != FD_INODE || !fp->readable || !fp->ip || !fp->ip->tags) {
+        cprintf("fp->type != FD_INODE || !fp->writable || !fp->ip || !fp->ip->tags");
+        return -1;
+    }
+   
+    if (!keys || maxTags < 0){
+        cprintf("maxTags<0");
+        return -1;
+    }
+    
+    ilock(fp->ip);
+
+    bp = bread(fp->ip->dev, fp->ip->tags);
+    memmove((void*)str, (void*)bp->data, (uint)BSIZE);
+    brelse(bp);
+    iunlock(fp->ip);
+    
+    for(i = 0, j = 0; i < BSIZE; i += 32){
+        if (str[i]){
+            memmove((void*)keys[j].key, (void*)((uint)str + i), 10);
+            j ++;
+        }
+    }
+    return j;
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 28c8308..809f02b 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -103,6 +103,10 @@ static int (*syscalls[])(void) = {
 [SYS_wait]    sys_wait,
 [SYS_write]   sys_write,
 [SYS_uptime]  sys_uptime,
+[SYS_tagFile] sys_tagFile,
+[SYS_removeFileTag] sys_removeFileTag,
+[SYS_getFileTag]  sys_getFileTag,
+[SYS_getAllTags]  sys_getAllTags,
 };
 
 // Called on a syscall trap. Checks that the syscall number (passed via eax)
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 89b2ee6..d9b0cf3 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -390,3 +390,96 @@ sys_pipe(void)
   fd[1] = fd1;
   return 0;
 }
+
+//****************************** changes for pro4 *********************
+int
+sys_tagFile(void){
+    // int tagFile(int fileDescriptor, char* key, char* value, int valueLength);
+    
+    int fileDescriptor;
+    char* key;
+    char* value;
+    int valueLength;
+    if(argint(0, &fileDescriptor) < 0)
+        return -1;
+    if(argstr(1, &key) < 0)
+        return -1;
+    if(argstr(2, &value) < 0)
+        return -1;
+    if(argint(3, &valueLength) < 0)
+        return -1;
+    return tagFile(fileDescriptor, key, value, valueLength);
+}
+
+int
+sys_removeFileTag(void){
+    //int removeFileTag(int fileDescriptor, char* key);
+    
+    int fileDescriptor;
+    char* key;
+    if (argint(0, &fileDescriptor) < 0) {
+        return -1;
+    }
+    if (argstr(1, &key) < 0){
+        return -1;
+    }
+    return removeFileTag(fileDescriptor, key);
+}
+
+int
+sys_getFileTag(void){
+   // getFileTag(int fileDescriptor, char* key, char* buffer, int length);
+  
+    int fileDescriptor;
+    char* key;
+    char* buffer;
+    int length;
+    
+    if(argint(0, &fileDescriptor) < 0)
+        return -1;
+    if(argstr(1, &key) < 0)
+        return -1;
+    if(argstr(2, &buffer) < 0)
+        return -1;
+    if(argint(3, &length) < 0)
+        return -1;
+    
+    return getFileTag(fileDescriptor, key, buffer, length);
+}
+
+
+int
+sys_getAllTags(void){
+    //getAllTags(int fileDescriptor, struct Key *keys, int maxTags)
+    
+    int fileDescriptor;
+    struct Key *keys;
+    int maxTags;
+    
+    if(argint(0, &fileDescriptor) < 0){
+        return -1;
+    }
+    if(argptr(1, (char**)&keys, sizeof(struct Key) * maxTags) < 0){
+        return -1;
+    }
+    if(argint(2,&maxTags) < 0){
+        return -1;
+    }
+    return getAllTags(fileDescriptor, keys, maxTags);
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/kernel/sysfunc.h b/kernel/sysfunc.h
index ee9dafd..d1ba4e8 100644
--- a/kernel/sysfunc.h
+++ b/kernel/sysfunc.h
@@ -23,5 +23,9 @@ int sys_unlink(void);
 int sys_wait(void);
 int sys_write(void);
 int sys_uptime(void);
+int sys_tagFile(void);
+int sys_removeFileTag(void);
+int sys_getFileTag(void);
+int sys_getAllTags(void);
 
 #endif // _SYSFUNC_H_
diff --git a/team.txt b/team.txt
new file mode 100644
index 0000000..4249c52
--- /dev/null
+++ b/team.txt
@@ -0,0 +1,2 @@
+ylf9397
+zwl2367
diff --git a/user/makefile.mk b/user/makefile.mk
index 1441eb8..dcaf134 100644
--- a/user/makefile.mk
+++ b/user/makefile.mk
@@ -16,7 +16,17 @@ USER_PROGS := \
 	tester\
 	usertests\
 	wc\
-	zombie
+	zombie\
+	tagFile-bad-fd\
+	tagFile\
+	tagFile1\
+	tagFile2\
+	removeFileTag\
+	removeFileTag1\
+	getAllTags\
+	getAllTags1\
+	17strings\
+
 
 USER_PROGS := $(addprefix user/, $(USER_PROGS))
 
diff --git a/user/user.h b/user/user.h
index 2b68ee0..2b20e99 100644
--- a/user/user.h
+++ b/user/user.h
@@ -3,6 +3,7 @@
 
 struct stat;
 
+
 // system calls
 int fork(void);
 int exit(void) __attribute__((noreturn));
@@ -25,6 +26,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int tagFile(int fileDescriptor, char* key, char* value, int valueLength);
+int removeFileTag(int fileDescriptor, char* key);
+int getFileTag(int fileDescriptor, char* key, char* buffer, int length);
+int getAllTags(int fileDescriptor, struct Key *keys, int maxTags);
 
 // user library functions (ulib.c)
 int stat(char*, struct stat*);
diff --git a/user/usys.S b/user/usys.S
index 8bfd8a1..8a262ac 100644
--- a/user/usys.S
+++ b/user/usys.S
@@ -29,3 +29,7 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(tagFile)
+SYSCALL(removeFileTag)
+SYSCALL(getFileTag)
+SYSCALL(getAllTags)
